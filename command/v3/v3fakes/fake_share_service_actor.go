// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeShareServiceActor struct {
	ShareServiceInstanceByOrganizationAndSpaceNameStub        func(serviceInstanceName string, orgGUID string, spaceName string) (v3action.Warnings, error)
	shareServiceInstanceByOrganizationAndSpaceNameMutex       sync.RWMutex
	shareServiceInstanceByOrganizationAndSpaceNameArgsForCall []struct {
		serviceInstanceName string
		orgGUID             string
		spaceName           string
	}
	shareServiceInstanceByOrganizationAndSpaceNameReturns struct {
		result1 v3action.Warnings
		result2 error
	}
	shareServiceInstanceByOrganizationAndSpaceNameReturnsOnCall map[int]struct {
		result1 v3action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeShareServiceActor) ShareServiceInstanceByOrganizationAndSpaceName(serviceInstanceName string, orgGUID string, spaceName string) (v3action.Warnings, error) {
	fake.shareServiceInstanceByOrganizationAndSpaceNameMutex.Lock()
	ret, specificReturn := fake.shareServiceInstanceByOrganizationAndSpaceNameReturnsOnCall[len(fake.shareServiceInstanceByOrganizationAndSpaceNameArgsForCall)]
	fake.shareServiceInstanceByOrganizationAndSpaceNameArgsForCall = append(fake.shareServiceInstanceByOrganizationAndSpaceNameArgsForCall, struct {
		serviceInstanceName string
		orgGUID             string
		spaceName           string
	}{serviceInstanceName, orgGUID, spaceName})
	fake.recordInvocation("ShareServiceInstanceByOrganizationAndSpaceName", []interface{}{serviceInstanceName, orgGUID, spaceName})
	fake.shareServiceInstanceByOrganizationAndSpaceNameMutex.Unlock()
	if fake.ShareServiceInstanceByOrganizationAndSpaceNameStub != nil {
		return fake.ShareServiceInstanceByOrganizationAndSpaceNameStub(serviceInstanceName, orgGUID, spaceName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.shareServiceInstanceByOrganizationAndSpaceNameReturns.result1, fake.shareServiceInstanceByOrganizationAndSpaceNameReturns.result2
}

func (fake *FakeShareServiceActor) ShareServiceInstanceByOrganizationAndSpaceNameCallCount() int {
	fake.shareServiceInstanceByOrganizationAndSpaceNameMutex.RLock()
	defer fake.shareServiceInstanceByOrganizationAndSpaceNameMutex.RUnlock()
	return len(fake.shareServiceInstanceByOrganizationAndSpaceNameArgsForCall)
}

func (fake *FakeShareServiceActor) ShareServiceInstanceByOrganizationAndSpaceNameArgsForCall(i int) (string, string, string) {
	fake.shareServiceInstanceByOrganizationAndSpaceNameMutex.RLock()
	defer fake.shareServiceInstanceByOrganizationAndSpaceNameMutex.RUnlock()
	return fake.shareServiceInstanceByOrganizationAndSpaceNameArgsForCall[i].serviceInstanceName, fake.shareServiceInstanceByOrganizationAndSpaceNameArgsForCall[i].orgGUID, fake.shareServiceInstanceByOrganizationAndSpaceNameArgsForCall[i].spaceName
}

func (fake *FakeShareServiceActor) ShareServiceInstanceByOrganizationAndSpaceNameReturns(result1 v3action.Warnings, result2 error) {
	fake.ShareServiceInstanceByOrganizationAndSpaceNameStub = nil
	fake.shareServiceInstanceByOrganizationAndSpaceNameReturns = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeShareServiceActor) ShareServiceInstanceByOrganizationAndSpaceNameReturnsOnCall(i int, result1 v3action.Warnings, result2 error) {
	fake.ShareServiceInstanceByOrganizationAndSpaceNameStub = nil
	if fake.shareServiceInstanceByOrganizationAndSpaceNameReturnsOnCall == nil {
		fake.shareServiceInstanceByOrganizationAndSpaceNameReturnsOnCall = make(map[int]struct {
			result1 v3action.Warnings
			result2 error
		})
	}
	fake.shareServiceInstanceByOrganizationAndSpaceNameReturnsOnCall[i] = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeShareServiceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.shareServiceInstanceByOrganizationAndSpaceNameMutex.RLock()
	defer fake.shareServiceInstanceByOrganizationAndSpaceNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeShareServiceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.ShareServiceActor = new(FakeShareServiceActor)
